
&pinctrl {
    spi0_default: spi0_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK,  0, 20)>, // SCLK P0.20
                    <NRF_PSEL(SPIM_MOSI, 0, 17)>, // MOSI P0.17
                    <NRF_PSEL(SPIM_MISO, 0, 17)>; // MISO P0.06
        };
    };

    spi0_sleep: spi0_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK,  0, 20)>, // SCLK P0.20
                    <NRF_PSEL(SPIM_MOSI, 0, 17)>, // MOSI/SDIO P0.17
                    <NRF_PSEL(SPIM_MISO, 0, 17)>; // MISO P0.06
            low-power-enable;
        };
    };

    spi1_default: spi1_default {
	    group1 {
		        psels = <NRF_PSEL(SPIM_SCK, 1, 0)>,
			            <NRF_PSEL(SPIM_MOSI, 0, 22)>,
                        <NRF_PSEL(SPIM_MISO, 1, 11)>;
	      };
    };

    spi1_sleep: spi1_sleep {
	    group1 {
		        psels = <NRF_PSEL(SPIM_SCK, 1, 0)>,
			            <NRF_PSEL(SPIM_MOSI, 0, 22)>,
                        <NRF_PSEL(SPIM_MISO, 1, 11)>;
                        low-power-enable;
	      };
    };

    spi2_default: spi2_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 6)>,
                    <NRF_PSEL(SPIM_MOSI, 1, 4)>,
                    <NRF_PSEL(SPIM_MISO, 0, 25)>;
          };
    };

    spi2_sleep: spi2_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 6)>,
                    <NRF_PSEL(SPIM_MOSI, 1, 4)>,
                    <NRF_PSEL(SPIM_MISO, 0, 25)>;
                    low-power-enable;
          };
    };

};

&uart0 {
	status = "disabled";
};

&uart1 {
	status = "disabled";
};

&i2c0 {
	status = "disabled";
};

&pwm0 {
	status = "disabled";
};


#include <zephyr/dt-bindings/input/input-event-codes.h>

nice_view_spi: &spi2 {
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi2_default>;
    pinctrl-1 = <&spi2_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&pro_micro 7 GPIO_ACTIVE_HIGH>;
};


&spi0 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio0 8 GPIO_ACTIVE_LOW>;

    trackball: trackball@0 {
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <4000000>;
        irq-gpios = <&gpio0 6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; // MISO/MOTION P0.06
        cpi = <600>;
        // swap-xy; /* optional */
        // invert-x; /* optional */
        // invert-y; /* optional */
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;

        // force-awake;
        /* keep the sensor awake while ZMK activity state is ACTIVE,
           fallback to normal downshift mode after ZMK goes into IDLE / SLEEP mode.
           thus, the sensor would be a `wakeup-source` */

        // force-awake-4ms-mode;
        /* while force-awake is acitvated, enable this mode to force sampling per 
           4ms, where the default sampling rate is 8ms. */
        /* NOTE: apply this mode if you need 250Hz with direct USB connection. */
    };
};

